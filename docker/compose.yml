services:
  import-module:
    build:
      context: .
      dockerfile: Dockerfile.import_module
    image: lzvnrw/import-module
    container_name: import-module
    env_file:
      - env/import_module.env
    volumes:
      - file_storage:/file_storage
  object-validator:
    build:
      context: .
      dockerfile: Dockerfile.object_validator
    image: lzvnrw/object-validator
    container_name: object-validator
    env_file:
      - env/object_validator.env
    volumes:
      - file_storage:/file_storage
  ip-builder:
    build:
      context: .
      dockerfile: Dockerfile.ip_builder
    image: lzvnrw/ip-builder
    container_name: ip-builder
    env_file:
      - env/ip_builder.env
    volumes:
      - file_storage:/file_storage
  preparation-module:
    build:
      context: .
      dockerfile: Dockerfile.preparation_module
    image: lzvnrw/preparation-module
    container_name: preparation-module
    volumes:
      - file_storage:/file_storage
  sip-builder:
    build:
      context: .
      dockerfile: Dockerfile.sip_builder
    image: lzvnrw/sip-builder
    container_name: sip-builder
    env_file:
      - env/sip_builder.env
    volumes:
      - file_storage:/file_storage
  transfer-module:
    build:
      context: .
      dockerfile: Dockerfile.transfer_module
    image: lzvnrw/transfer-module
    container_name: transfer-module
    env_file:
      - env/transfer_module.env
    volumes:
      - file_storage:/file_storage
  job-processor:
    build:
      context: .
      dockerfile: Dockerfile.job_processor
    image: lzvnrw/job-processor
    container_name: job-processor
    depends_on:
      backend:
        condition: service_healthy
    env_file:
      - env/job_processor.env
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    image: lzvnrw/backend
    container_name: backend
    depends_on:
      database:
        condition: service_started
    healthcheck:
      test: "python3 -c 'import urllib.request as r; import sys; sys.exit(0) if r.urlopen(\"http://localhost:8080/status\").status == 200 else sys.exit(1)'"
      interval: 1s
      retries: 10
      start_period: 1s
      timeout: 5s
    env_file:
      - env/backend.env
    ports:
      - 8086:8080
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    image: lzvnrw/frontend
    container_name: frontend
    env_file:
      - env/frontend.env
    ports:
      - 8088:8080
  database:
    image: postgres:14.13
    container_name: database
    env_file:
      - env/database.env
    volumes:
      - file_storage:/file_storage
  rosetta-stub:
    build:
      context: .
      dockerfile: Dockerfile.rosetta_stub
    image: lzvnrw/rosetta-stub
    container_name: rosetta-stub
    env_file:
      - env/rosetta_stub.env
    volumes:
      - file_storage:/file_storage
volumes:
  file_storage:
    external: True
    name: dcm_file_storage
