"""
Minimal flask app that can be used as a stub for an OAI-PMH server. It
implements a simplified version of a subset of the OAI-protocol 2.0:
* Identify
* ListMetadataFormats
* ListSets
* ListIdentifiers
* GetRecord

Responses usually only contain the relevant information (request-data
is omitted in the responses, for example).

See also https://www.openarchives.org/OAI/openarchivesprotocol.html

A random data set is generated on startup (optionally use the
environment variable RANDOM_SEED to get a persistent dataset). The oai-
endpoint is located at /oai, payload is hosted at /files/<filename>.

Optional configuration-options:
* `RANDOM_SEED`: random seed for generation of repository data
* `REPOSITORY_NAME`: repository's name as included in an Identify-
  response
* `OAI_BASE_PATH`: oai-base-path
* `DELIMITER`: included in an Identify-response and delimiter for record
  identifiers
* `SCHEME`: included in an Identify-response and first segment for
  record identifiers
* `REPOSITORY_IDENTIFIER`: included in an Identify-response and second
  segment for record identifiers
* `REPOSITORY_SIZE`: total number of identifiers served by the server
* `EARLIEST_DATETIMESTAMP`: lower bound for datetime-range of records
* `LATEST_DATETIMESTAMP`: lower bound for datetime-range of records

Configuration for simulation of real-world problems (the individual
failure-modes and scenarios are handled independently for every
request):
* `OAI_ERROR_RATE`: probability of errors during oai-requests
* `OAI_LATENCY_LOWER`: lower bound for latency during oai-requests
* `OAI_LATENCY_UPPER`: upper bound for latency during oai-requests
* `OAI_BUSY_RATE`: probability of busy during oai-requests
* `OAI_INVALID_PAYLOAD_RATE`: probability of returning invalid files
  during transfer
* `OAI_EMPTY_PAYLOAD_RATE`: probability of records not linking any files
* `OAI_DELETED_RATE`: probability of records being deleted
* `FILES_ERROR_RATE`: probability of errors during file-transfer
* `FILES_LATENCY_LOWER`: lower bound for latency during file-transfer
* `FILES_LATENCY_UPPER`: upper bound for latency during file-transfer
* `FILES_MISSING_RATE`: probability of missing file during transfer
* `FILES_BUSY_RATE`: probability of busy during file-transfer
* `FILES_BROKEN_RATE`: probability of broken files during transfer
"""

from typing import Optional
import os
from datetime import datetime
from dataclasses import dataclass
from random import seed, random, randrange, choice, choices
from uuid import UUID, uuid3, uuid4
import bisect
from math import floor
from time import sleep

from flask import Flask, Response, request


class OAIPMHAppConfig:
    """OAI-PMH-stub configuration."""

    RANDOM_SEED = os.environ.get(
        "RANDOM_SEED", str(datetime.now().timestamp())
    )
    REPOSITORY_NAME = os.environ.get("REPOSITORY_NAME", "LZV.nrw OAI-PMH-stub")
    OAI_BASE_PATH = os.environ.get("OAI_BASE_PATH", "/oai")
    DELIMITER = os.environ.get("DELIMITER", ":")
    SCHEME = os.environ.get("SCHEME", "oai")
    REPOSITORY_IDENTIFIER = os.environ.get("REPOSITORY_IDENTIFIER", "lzvnrw")
    REPOSITORY_SIZE = int(os.environ.get("REPOSITORY_SIZE", 100))
    EARLIEST_DATETIMESTAMP = int(
        datetime.fromisoformat("2020-01-01T00:00:00+00:00").timestamp()
    )
    LATEST_DATETIMESTAMP = int(datetime.now().timestamp())
    UUID_NAMESPACE = UUID("96ee5d00-d6fe-4993-9a2d-49670a65f2cf")

    OAI_ERROR_RATE = float(os.environ.get("OAI_ERROR_RATE", 0))
    OAI_LATENCY_LOWER = float(os.environ.get("OAI_LATENCY_LOWER", 0))
    OAI_LATENCY_UPPER = float(os.environ.get("OAI_LATENCY_UPPER", 0))
    OAI_BUSY_RATE = float(os.environ.get("OAI_BUSY_RATE", 0))
    OAI_INVALID_PAYLOAD_RATE = float(
        os.environ.get("OAI_INVALID_PAYLOAD_RATE", 0)
    )
    OAI_EMPTY_PAYLOAD_RATE = float(os.environ.get("OAI_EMPTY_PAYLOAD_RATE", 0))
    OAI_DELETED_RATE = float(os.environ.get("OAI_DELETED_RATE", 0))
    FILES_ERROR_RATE = float(os.environ.get("FILES_ERROR_RATE", 0))
    FILES_LATENCY_LOWER = float(os.environ.get("FILES_LATENCY_LOWER", 0))
    FILES_LATENCY_UPPER = float(os.environ.get("FILES_LATENCY_UPPER", 0))
    FILES_MISSING_RATE = float(os.environ.get("FILES_MISSING_RATE", 0))
    FILES_BUSY_RATE = float(os.environ.get("FILES_BUSY_RATE", 0))
    FILES_BROKEN_RATE = float(os.environ.get("FILES_BROKEN_RATE", 0))

    RECORD_DATA = {
        "firstnames": [
            "Bartholomew",
            "Priscilla",
            "Nigel",
            "Percival",
            "Tabatha",
            "Grimsby",
            "Mathilda",
            "Morton",
            "Everett",
            "Eleanor",
            "Prudence",
            "Lawrence",
            "Harrington",
            "Montgomery",
            "Cassandra",
            "Evangeline",
            "Remington",
        ],
        "lastnames": [
            "Featherstonehaugh",
            "Thistlethwaite",
            "Crumpetsworth",
            "Bottombean",
            "Bracegirdle",
            "Fernsthawby",
            "Twelvethees",
            "Sallowbridge",
            "Betterfarthston",
            "Cholmondeley",
            "Belvoirchamp",
            "Fenwickerweed",
            "Gloucesterforth",
            "Cox",
        ],
        "titles": [
            "Dancing {noun1} and {adjective} Quantum {noun2}",
            "Whispers from the {noun1}: Unveiling the {adjective} Secrets of {noun2}",
            "A new Method for Controlling {noun1} by Means of {adjective} {noun2}",
            "Decoding the {noun1}: When {adjective} Changes the {noun2} World",
            "Symphony of the {noun1}: Mapping the {adjective} Music of {noun2}",
            "Unmasking the {noun1}: Understanding the {adjective} Enigmas of {noun2}",
            "{noun1}: Recent {adjective} Advancements on {noun2}",
            "Bridging {noun1}: Linking {adjective} Observations to Real-world {noun2}",
            "Investigating the Contribution of {noun1} to Emergence across {adjective} {noun2}",
            "Deciphering {noun1} to Understand {adjective} Coordination of {noun2}",
            "From Theory to {noun1}: Translating {adjective} Concepts into {noun2}",
            "Theoretical Limits for Predictability of {noun1} given {adjective} Observations of {noun2}",
            "Long-term Monitoring of {noun1} Reveals {adjective} Trends in the Distribution of {noun2}",
            "Longitudinal Analysis of {noun1} and its {adjective} Relation with {noun2}",
            "Toward a Unified Model of {noun1} that Accounts for {adjective} Heterogeneity in {noun2}",
            "Practical Guidelines for the Handling of {noun1} with {adjective} Uncertainty in {noun2}",
            "Exploring {adjective} Feedback Loops between {noun1} and {noun2} in Dynamic Regulatory Networks",
            "Integrating Measurements of {noun1} in {noun2} to Predict {adjective} Outcomes",
            "Cross-disciplinary Perspectives on {noun1} and the {adjective} Evolution of {noun2} in Complex Systems",
            "Experimental Validation of {noun1}-driven changes in {noun2} under {adjective} Changes",
            "High-resolution Characterization of {noun1} and its {adjective} Impact on {noun2} Dynamics",
            "Novel Computational Methods for Inferring {noun1} from {adjective} Datasets Collected from {noun2}",
            "{adjective} Implications of {noun1} for the Regulation of {noun2}",
            "Design and {adjective} Optimization of {noun1} for Manipulating {noun2}",
            "Evaluating Trade-offs between {adjective} Cost and Accuracy in {noun1}-based {noun2} Estimation",
            "Uncovering Latent Factors in {noun1} that Explain {adjective} Variability in {noun2}",
            "Implications of Altered {noun1}-profiles for {adjective} Prognosis of {noun2}",
            "Synthesizing {noun1} using {adjective} Method Derived from {noun2}-research",
            "A Statement on Best Practices for Annotating {noun1} in {adjective} Studies of {noun2}",
            "Identifying Causal Links between {noun1}-exposure and the {adjective} Onset of {noun2}",
        ],
        "title_adjective": [
            "Physical",
            "Classified",
            "Significant",
            "Preliminary",
            "Theoretical",
            "Empirical",
            "Systematic",
            "Computational",
            "Stochastic",
            "Deterministic",
            "Optimized",
            "Symbiotic",
            "Conserved",
            "Quantum",
            "Relativistic",
            "Classical",
            "Canonical",
            "Coherent",
            "Algorithmic",
            "Parallel",
            "Parametric",
            "Distributed",
            "Approximate",
        ],
        "title_nouns": [
            "Photons",
            "Butterfly Effect",
            "Time",
            "Brains",
            "Consciousness",
            "Fractals",
            "Chaos",
            "Law",
            "Humanity",
            "Genomes",
            "Language",
            "Singularities",
            "Entanglement",
            "Catalysts",
            "Plasticity",
            "Microbiomes",
            "Causality",
            "Correlation",
            "Data",
            "Systems",
            "Ecosystems",
            "Perception",
            "Oscillation",
            "Metamaterials",
            "Spectroscopy",
            "Media",
            "Discourse",
            "Culture",
            "Decoherence",
            "Ergodicity",
            "Epistemology",
            "Coupling",
            "Architecture",
            "Criticality",
            "Entropy",
            "Resonance",
            "Topology",
            "Networks",
        ],
        "rights": [
            "http://rightsstatements.org/vocab/InC/1.0/",
            "http://rightsstatements.org/vocab/InC-NC/1.0/",
            "http://rightsstatements.org/vocab/InC-EDU/1.0/",
            "http://rightsstatements.org/vocab/InC-RUU/1.0/",
            "http://rightsstatements.org/vocab/InC-OW-EU/1.0/",
            "http://rightsstatements.org/vocab/NoC-OKLR/1.0/",
            "http://rightsstatements.org/vocab/NoC-US/1.0/",
            "http://rightsstatements.org/vocab/NoC-CR/1.0/",
            "http://rightsstatements.org/vocab/NoC-NC/1.0/",
            "http://rightsstatements.org/vocab/NKC/1.0/",
            "http://rightsstatements.org/vocab/CNE/1.0/",
            "http://rightsstatements.org/vocab/UND/1.0/",
        ],
        "files_good": ["jpg-ok.jpg", "tiff-ok.tiff", "pdf-ok.pdf"],
        "files_bad": ["tiff-bad.tiff"],
        "files": {
            "jpg-ok.jpg": {
                "name": "jpg-ok.jpg",
                "mimetype": "image/jpeg",
                "data": b"\xff\xd8\xff\xe0\x00\x10JFIF\x00\x01\x01\x01\x01,\x01,\x00\x00\xff\xdb\x00C\x00\x03\x02\x02\x03\x02\x02\x03\x03\x03\x03\x04\x03\x03\x04\x05\x08\x05\x05\x04\x04\x05\n\x07\x07\x06\x08\x0c\n\x0c\x0c\x0b\n\x0b\x0b\r\x0e\x12\x10\r\x0e\x11\x0e\x0b\x0b\x10\x16\x10\x11\x13\x14\x15\x15\x15\x0c\x0f\x17\x18\x16\x14\x18\x12\x14\x15\x14\xff\xdb\x00C\x01\x03\x04\x04\x05\x04\x05\t\x05\x05\t\x14\r\x0b\r\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\xff\xc2\x00\x11\x08\x00\x02\x00\x02\x03\x01\x11\x00\x02\x11\x01\x03\x11\x01\xff\xc4\x00\x14\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\xff\xc4\x00\x15\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x06\xff\xda\x00\x0c\x03\x01\x00\x02\x10\x03\x10\x00\x00\x01\rB\x17\xff\xc4\x00\x15\x10\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x02\xff\xda\x00\x08\x01\x01\x00\x01\x05\x02\x11;/\xff\xc4\x00\x17\x11\x00\x03\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x02\x11\xff\xda\x00\x08\x01\x03\x01\x01?\x01\xaaz\x7f\xff\xc4\x00\x18\x11\x00\x02\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x02\x00\x11!\xff\xda\x00\x08\x01\x02\x01\x01?\x01U\x142\x7f\xff\xc4\x00\x17\x10\x01\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x02\x00\x11\xff\xda\x00\x08\x01\x01\x00\x06?\x02\x8a\xa8\x95N\xaao\xff\xc4\x00\x17\x10\x01\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x111\xff\xda\x00\x08\x01\x01\x00\x01?!\x03-\x02\xab[?\xff\xda\x00\x0c\x03\x01\x00\x02\x00\x03\x00\x00\x00\x10\xff\x00\xff\xc4\x00\x18\x11\x00\x02\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x11!1\xff\xda\x00\x08\x01\x03\x01\x01?\x10\x93\xb7\xa7\xff\xc4\x00\x15\x11\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x001\x00\xff\xda\x00\x08\x01\x02\x01\x01?\x10\x0c/\xff\xc4\x00\x17\x10\x01\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x11\x00!\xff\xda\x00\x08\x01\x01\x00\x01?\x10V\x1f\x98AR\x95W\xb7\x7f\xff\xd9",
            },
            "tiff-ok.tiff": {
                "name": "tiff-ok.tiff",
                "mimetype": "image/tiff",
                "data": b"II*\x00\x14\x00\x00\x00Lk\x97*.2*.2Lk\x97\x11\x00\x00\x01\x03\x00\x01\x00\x00\x00\x02\x00\x00\x00\x01\x01\x03\x00\x01\x00\x00\x00\x02\x00\x00\x00\x02\x01\x03\x00\x03\x00\x00\x00\xf6\x00\x00\x00\x03\x01\x03\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x01\x03\x00\x01\x00\x00\x00\x02\x00\x00\x00\x11\x01\x04\x00\x01\x00\x00\x00\x08\x00\x00\x00\x12\x01\x03\x00\x01\x00\x00\x00\x01\x00\x00\x00\x15\x01\x03\x00\x01\x00\x00\x00\x03\x00\x00\x00\x16\x01\x03\x00\x01\x00\x00\x00\x80\x00\x00\x00\x17\x01\x04\x00\x01\x00\x00\x00\x0c\x00\x00\x00\x1a\x01\x05\x00\x01\x00\x00\x00\xe6\x00\x00\x00\x1b\x01\x05\x00\x01\x00\x00\x00\xee\x00\x00\x00\x1c\x01\x03\x00\x01\x00\x00\x00\x01\x00\x00\x00\x1d\x01\x02\x00\x0c\x00\x00\x00\xa2\x03\x00\x00(\x01\x03\x00\x01\x00\x00\x00\x02\x00\x00\x00S\x01\x03\x00\x03\x00\x00\x00\xfc\x00\x00\x00s\x87\x07\x00\xa0\x02\x00\x00\x02\x01\x00\x00\x00\x00\x00\x00,\x01\x00\x00\x01\x00\x00\x00,\x01\x00\x00\x01\x00\x00\x00\x08\x00\x08\x00\x08\x00\x01\x00\x01\x00\x01\x00\x00\x00\x02\xa0lcms\x040\x00\x00mntrRGB XYZ \x07\xe7\x00\x0c\x00\x05\x00\x08\x00\x17\x008acspAPPL\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf6\xd6\x00\x01\x00\x00\x00\x00\xd3-lcms\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\rdesc\x00\x00\x01 \x00\x00\x00@cprt\x00\x00\x01`\x00\x00\x006wtpt\x00\x00\x01\x98\x00\x00\x00\x14chad\x00\x00\x01\xac\x00\x00\x00,rXYZ\x00\x00\x01\xd8\x00\x00\x00\x14bXYZ\x00\x00\x01\xec\x00\x00\x00\x14gXYZ\x00\x00\x02\x00\x00\x00\x00\x14rTRC\x00\x00\x02\x14\x00\x00\x00 gTRC\x00\x00\x02\x14\x00\x00\x00 bTRC\x00\x00\x02\x14\x00\x00\x00 chrm\x00\x00\x024\x00\x00\x00$dmnd\x00\x00\x02X\x00\x00\x00$dmdd\x00\x00\x02|\x00\x00\x00$mluc\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x0cenUS\x00\x00\x00$\x00\x00\x00\x1c\x00G\x00I\x00M\x00P\x00 \x00b\x00u\x00i\x00l\x00t\x00-\x00i\x00n\x00 \x00s\x00R\x00G\x00Bmluc\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x0cenUS\x00\x00\x00\x1a\x00\x00\x00\x1c\x00P\x00u\x00b\x00l\x00i\x00c\x00 \x00D\x00o\x00m\x00a\x00i\x00n\x00\x00XYZ \x00\x00\x00\x00\x00\x00\xf6\xd6\x00\x01\x00\x00\x00\x00\xd3-sf32\x00\x00\x00\x00\x00\x01\x0cB\x00\x00\x05\xde\xff\xff\xf3%\x00\x00\x07\x93\x00\x00\xfd\x90\xff\xff\xfb\xa1\xff\xff\xfd\xa2\x00\x00\x03\xdc\x00\x00\xc0nXYZ \x00\x00\x00\x00\x00\x00o\xa0\x00\x008\xf5\x00\x00\x03\x90XYZ \x00\x00\x00\x00\x00\x00$\x9f\x00\x00\x0f\x84\x00\x00\xb6\xc4XYZ \x00\x00\x00\x00\x00\x00b\x97\x00\x00\xb7\x87\x00\x00\x18\xd9para\x00\x00\x00\x00\x00\x03\x00\x00\x00\x02ff\x00\x00\xf2\xa7\x00\x00\rY\x00\x00\x13\xd0\x00\x00\n[chrm\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\xa3\xd7\x00\x00T|\x00\x00L\xcd\x00\x00\x99\x9a\x00\x00&g\x00\x00\x0f\\mluc\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x0cenUS\x00\x00\x00\x08\x00\x00\x00\x1c\x00G\x00I\x00M\x00Pmluc\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x0cenUS\x00\x00\x00\x08\x00\x00\x00\x1c\x00s\x00R\x00G\x00BHintergrund\x00",
            },
            "pdf-ok.pdf": {
                "name": "pdf-ok.pdf",
                "mimetype": "application/pdf",
                "data": b"""%PDF-1.6\n%\xc3\xa4\xc3\xbc\xc3\xb6\xc3\x9f\n2 0 obj\n<</Length 3 0 R/Filter/FlateDecode>>\nstream\nx\x9cU\x8a;\x0b\xc30\x10\x83\xf7\xfb\x15\x9a\x0b\xb9\xde9\xf1\x0b\x8c\xa1\xe9c\xe8\x160t(\xdd\xfa\xd8\n\xc9\x92\xbf_\xbb\x9d\x8a@\xfa\x84$\xacXi\x86@XL\x80\x8d\x96\x8d\xb7\x08\x83rp\x8a\xe5A\x97\r\xde\xbfG\xd5\xf2\xa2\xb1\x90u\x1c\xe0}\xcf1D\x94;\xb6\'\x85\x1a\x94\xe75\x89f\x93\xc4H\xdfb\xc8]u\xfb_\\\xd6$\xbeBh\x10k\xef\\\x92]\xbb\x8c\xb2o\xf1\x1d\x0e\xf9V\xcet,4\xd1\x84\x0f\x8ah#\x91\nendstream\nendobj\n\n3 0 obj\n133\nendobj\n\n5 0 obj\n<</Length 6 0 R/Filter/FlateDecode/Length1 10532>>\nstream\nx\x9c\xe5:mp[\xd5\x95\xf7\xbc\'\xc9\x92%G\x92cIv\x14IOyq\xbelYvd\x878$\xf1\x8bm\xc9N\xec\xc4\x8a?\x82\x15B,\xd9\x92-\x11[\x12\x92\x92\x10h\x16S\nd\x0ci\x02e\x81@vI;\x94\xa1,[\x9eI\xba\r]\xb61-t\xb7\xdbm\x81-\x9d\x1dJ\xb3d\xa7\xe9t\xa6%CJ)\xdb\x81F\xdes\xaf\x9e\x1c;\x04:\xdb\xd9\x7f\xfb\xe4\xfb\xde\xf9>\xe7\x9es\xee}WJr\x99\xfd1b \x93\x84\'\xd2\xc8D$\xed\xad\xb2\x96\x13B\xfe\x8d\x10(\x1f9\x90\x136\xf5XnD\xf8\x02!\xdc\xbf\x8f\xa6\xc7&\x9e\xf8\xf6\x9e\x0f\tQ\x9d!\xa4\xe4\xcc\xd8\xf8\xa1\xd1\xea\xb6\x9bP\xde\x10\xc7\xf1j<\x16\x89\xb6\xd4?\xe4!\xa4\xaa\x16m\xac\x8b#\xa1?\x7f\xa8\x04\xf1(\xe2\xcb\xe3\x13\xb9\xdb\x8fr\xf9\x06\xc4\x8f \xbe~<5\x12\xd9e\xed\xb5 >\x83\xb8s"r{z\x8d\xaa\x8dC\x1c\xfd\x11!\x19\x99\x88\xfd\xf1o\xbf\x8f\xbaK\x10\xd5g\xd3\xa9l.J\x8e\xcc\x12R\x9d\xa3\xfct&\x96\xee~b\xf85\xc4\x1f!\x84?\x8e4\xc0\x0f\xbd\x0c\x08j(\xce\xf1*\xb5\xa6D\xab+\xd5\x1b\xca\xc8\xff\xc3K}\x94XH\xa7z\x131\x924\xbb/\xb8\xf8\xe7I\x159A\xc8\xec{\x14\xbbz\xcfw\xcf~\xfc\x7f\x19\x85\xb6\xf0x\x9c<C\xce\x90\xa3\xe4mr\x8b\xc2\x08\x90 I\x90\xfdH\x99\x7f\xbdB\xdeD*\xbd\x82d7y\x8eL}\x86\xd9\xe7\xc9Y\xe4\x17\xe4\xc2\xe4\x18\x9d\xc9u\xaf y\x8c\x9c&\xff\xbc\xc0K\x90L\x90;1\x96o\x91\xb7\xa1\x81\xfc\x10[%E>\x00-\xb9\x9b\xbc\x86V?@\xda\xf6\xeb\x99\xe2\x16\xe1m\x94\x81\xa3\xf3\xa8\xef\x90\'\xb9\x07\xc86\xee""\'(\x87\xf3r&\xf2*9\t{\xd1r\x0e\xe7ytn\xc6\x1b?e\xf4~r\x18\xef}$N\x0e \xcc.\xf5\xa6?\xfd\x9c\xe8f\x7f\x8f\xb3:L\xb6\x91/\x92-d|\x9e\xc6\xcb\xf0\x14_\x8a\xf5\xeb\'OaN_a4o\x91Y\xd2\xc9\xdf\xca\xfd\x03\xc7]\xf9\n"\x0f\x911\x1c\x11\xc0\xb9sG\xf9-\x9f\x91\xa1\xff\xf5\xc5\x0f\x902X\xcdW\x13\xdd\xf5\xb8\\#1\xe6?\xe6\xd6\xce~\xc8/\'\xa5d`\xf6r\x916\xdb5\xfb{>\x92O\xaa\x86TK\xd5\x9bT?\xfa<\x1f\x9a\x87T\x13\xa8Mf\x7f\x95\xbf3\x1fU\xefP?\x83\xd5z\x96\x10\xa9\xe3\xe6\xdd\xa1\xc1\x81\xfe\xbe\xde\x9d\xc1\x9e\x1d\xdb\xbb\xbb\xb6m\xed\xec\x08\xf8\xdb\xdbZ\xb7H-\x9b7m\xbcqC\xf3\xfa\x1b\xd655\xd4{\xeb<\xb5\xabV\xae\xa8^..s\xbb*+\xcc&\xe3\xa22}\xa9N[\xa2Q\xabx\x0eH\xad C\xd8/\xf3\xd5\x829\x10\x11\xfdb\xa4\xd3S+\xf8+\xe3\xed\x9eZ\xbf\x18\x08\xcbBD\x90\xf1\xa1Z!vv2\x92\x18\x91\x85\xb0 \xaf\xc0Gd\x1e9,K(9z\x8d\xa4T\x90\x94\xe6$\xc1$l$\x1b\xa9\x0bQ\x90\x7f\xdc.\nga\xf7\xceA\x84\x8f\xb6\x8b!A\xbe\xc4\xe0\xed\x0cV\xad`H\x19"n7j\xb0\xa8h\xb4\x82_\x0e\x1c\x88O\xf9\xc3\x18#L\xebK\xdb\xc4\xb6X\xa9\xa7\x96L\x97\xea\x11\xd4#$\xaf\x12\xd3\xd3\xb0j30\x80[\xe5\xdf0\xcd\x11m\x19u\x8b3\xf5G\xa2rp\xe7\xa0\xbf\xdd\xeev\x87<\xb5[\xe5Eb;c\x916fR\xd6\xb4\xc9%\xcc\xa4\x90\xa0\xa1\x93\x07\x84\xe9\xda\x99\xa9\x07\xcf\x9a\xc8p\xb8\xc6\x10\x15\xa3\x91=\x832\x1fA\xdd)\xde?5u\xbfl\xae\x91W\x8b\xed\xf2\xea;.V\xe2\xcccr\xad\xd8\xee\x97k\xa8\xd5\xae\xde9?]W]\x82\xac\xae6\x89\xc2\xd4\x1f\x08NG\xbc\xf4\xdeBJD\xa1h\xaaM\x7f \x14\x94\xb96\x19z\x07\xdd\xf4\xb2\x070\xd7SS\x01Q\x08L\x85\xa7"gg\'\x87E\xc1$NM\x1b\x0cSi?\xa6\x9b\x04\x07\xd1\xc4\xd9\xd9\xef<`\x97\x03\x0f\x86dS8\x0e\x1bB\xca\xd4\x03\xbd]\xf2\xe2\x9d7\x0f\xca\\u@\x88G\x90\x82\x7f-\xa2{\xbd\xddm\x9e\x93\t~\x16\x9b`Z09\x98a\xb7\x9b\xa6\xe1\x81\xb3\x12\x19FD\x9e\xdc9X\xc0\x052l\x7f\x91H\xde\x9a\x90\xcc\x85)g\xa6\xc8\xb1\x0cP\xced\x913\xa7\x1e\x16\xb1\xb6]}\x83S\xb2\xaazkT\xf4c\xc6\x1f\x88\xc8\x93\xc3\xd8]\xb7\xd2\xc2\x88&y\xd1Gv\xb78Un\x16\x9a\xbd!&+`T[\xa3\tAV\xaf\xc0$\xa1\xd6|\x05\xec\x1b\xaa2eb\xc8\xa2\x8f\n\x8fKvt\xb0\xc2\\.4\x8bh\x86\xda\xf1\x8b\xfe\xb0\xf2w ^\x89\x06\x04LtgM\xa1\x11\xfa\x07e\xa9\x1d\x01)\xa2T\xcc?]\xefE\x8dH\x18\x0b\x96hg\xc5\x94\xbdbZ\xae\x10[\xe7\xaaK\xc3\xf2\'\xfa\x06\x99\x8a\xa2&W\xb4\xc9$<\xa2h\xc9^?[W\x82\x7f*\xdc^\x08\x81\xda\x12w\x0e\xbeD|\xb3\x17\xa6\x1b\x05\xfbi\x1fi$\xa1v*lm\xc3.[\xe1\x9f\x1a\x8c\x8e\xca\xae\xb0=\x8a\xebnT\x18\xb4\xbbe)\x84\x15\x0e\x89\x83\xb1\x10m;\xcc\xd0\xea\x0bv\xd6\x1c!\xd6+\xfd\x83]}b\xd7\xce\xdd\x83\xeb\x95@\n\x0cjNU\xed\xbf\xc6\x8c8h/\x98\xc1\x06\x94\xb5\xd5Za\x90\xb3\xf3!\x144!A\x08  \xb6n\xc4\xbb\\R\xad\xc5a\xc2\x843*m\xdc\xd6\x8d\xc2 \xd8IQ\x1a\xc3\x90W\x0b\xfeX\xbb"G\xf1\x05F\xd5\xb4\x9d\xda:\x8b\xd64\x14E;m\x9dvw\xc8]\xb8<\xb5\x1c\xb2\x05\xc51jhiR;\x8b,\xdc\xa6\x90\xa1\xc5\xfel\xebd$\x9a\xcbJ\xda\xf4\xc2\xa0\x18\x13Cb\\\x90\xa5\xe0 \x9d\x1bM\x0f\xcb\xb2\x92\x0c\x96s\xa5V\xfd\x0b\xb0y\xc9\xc24\x117\xb2\x8b\x08M\xa6\x1c\xa8\xb1\xcfO\xae\xdc\xc1\xf09\xb4\xf3\x1a\xf6\xd6"[\x98\xd2\x8a]}S\xd4\xb8\xa8\x18$\x18\xf9V\x99\xd0\x16\x96\xd6\x9b\xedl/\xa0\x0bZ\xc4\xbdW0\xe1\x92f\x0bzjZ\x92\xe8b\x8eo\xa0F\xc4\xad\xd1)\xb1op#\x93\xc6\xfd\xe4\xb0\xfd\x0e\xea\xab\x9ctAW\x7f\xab\xa7\x16\xb7\xb6\xd6i\x11\x8e\xec\x9c\x96\xe0H\xdf\xee\xc1\x97Lx.<\xd2?\xf8"\x07\\[\xb854\xbd\x1cy\x83/\t\xf8\xd2`T\x8eR)\x91"\x02E\xa8\xa5^D\xb4L\xde\xfe\x92D\xc8$\xe3\xaa\x18\x81\xe1#g\x810\x9a\xb6H\x032r\x96+\xd0L\x05G+\x98#\x89p\xc8Q\x158RQZ\x854m\x816\xc9h\xec\x9a&4eR\xa9Z\xd2J:\xc9\xc0\x95q\xf6i\xa0\xa4\x17\x91\xf2\x1d<\xc7\xea\x80\x9c6@\x19\xd8\xa7Q\xab\x97\x91\xcf\xc2\xe4\xb4N\xb2\x17$&QB*Dxd\xe0\xaa\xeb\x81\xdd\x83\xa7\r\xf8v\xb6\xb3;:j\xa5\x17\xb6Ke\x1c\x8b\x8d\xaf\x15\xbf\x10\xa5\x8d\xf2\x85P|*\x1c\xa2\x8b\x8dX\xb14\xf8\x072\x88\x9b\xb1L\xe2f\x0cDc\x90K\xc5X\xab\xac\x17[)\xbd\x85\xd2[\nt\r\xa5\x97`\x8b\x82\x15P}\x12k\x1f\x94\x81v\xc0\xcd\x83n\\\x92\xc2\x92\x1f\xda\xa7L\x97h\xa5B\xb8\xa9L\x99~\xe5\xc1\x8cU\xe3\xf7\x86W\xf0\x0cZ\x01\x1b\xa5\xf3\xe5\x9c\x9e\xd3\xf2\x16\xab\x81hA\xc7k\xb5:3\xaf\xe3\xc3!\x1d_\xce\x11n(D\xca[\xac`\xb4\xc2\x05+\x9c\xb3\xc21+\xdce\x85!+ Q`\xf4}\x97\xad\xf0\xba\x15N1^\xda\n=Vp1F\x81.[\xe1)\xc6J15\xc9\n\xf5L\x80X\xe1]\xc6\x9dd\xf4zF\xb9q\x96\xf9)\xa8\x1dc\x8c\x1e\xc6\xbb\xcc\xe8r\xd1GAA`:\x97\x99\xa1\x19\xe6f\x92q14o\xd1\xc7-s\xd7m\xc5+\xa3\\{\xaf\xa1\x7f\x8aCy\xa4\xa5\xc6L|\x95\xecn\xf6Uz\x87\xf6\xde\xe23\x97\x83\xad\xd9\xeck\xa8w7\xdd`\x16\x97\x19A4\xbb\xcd\xe2\xca:\xa8\x01\xb3\xcd\x027\xfe\xccw\xe5\x16{\x9b\xead\xbb\xdd\xf9\xaf\xb77\xfc\xac\xc9\xaez\xac\xe2M\xb81\xff\xda\x9b%\xfaO\xf6\xd9\x9b\xe8\x81\nH\x05\x9e\xdc~\x85\xdf\t\x1c\xe4;\xd2!RQQU\xb6h\x91\xaeJ\xe7t9\x96\x04C\x0eR\x81\x88\xad*\x182\xd8,\x8b9N\xad6\xf7\x86\xd4\xa6S.\xb8\xe0\x82\x19\x17\x98\\@\\\xd0\x8c\xc8q\x17\xa4]\x10vA\xd0\x05\x92\x0b\xea] \xb8\xc0\xc5\xd8\xc8\x9a,r\x91\xf5\x06\xd3\x94]pj\x1e}~r2\x99\x05\tP\xe6\x8e\xb3n\xf1Q\xc0\xc7\xd2P\x0e\xcd8\xf7\xc2\xa7\xa1\x1e*J6\x83o\xad\xd5\x82\x13\xa7\xd9h\x14\x97\x95(\xe0\xca&7\x04J:\xbf\xddr\xc7\x172\xf9}\x87\x9f\xd9{\xcf]\xf9\xe8\xc1\x07a-\xffQ\xbcn\xf5\xc6/\xdf\x7f\xe5\xd1*\x8f\xa7\x8a\xdb\xfb\xbc\xe3\xcab\n\xa9\xb9J\x0f.\x9c\x1a<\x9f\x96\xab\xbb\x89\x1e\xbf-\xfd\x8d4J\x0c\x06\x8d\xd9l\xb3\xf2\xba\xbe\x10\xe1\xc1\xc4\xf3\x16\xc9R\x1e\x0cY\x8c\x06\xb3\xd1\x1c\x0c\x19-\x156P\xd9\xa0\xf9C\x1b\x1c\xb7\x01\x97\xb6A\xd8\x06A\x1bH6\x98\xb1\x81l\x83S\x0c\x15l`\xb2\x01\xb1\xc1eFA\xd1\xf9\x92\x0b{\x84\xa6`\x88ea\xae\xfcdI\xa5\xe9\'X|\x96\x00\xb3O\x99\xbcF\\\xb6\xa2\xa9q\x1d&\x80\xbf:\xe9;%O\xad$\xd5z\xa4\xd2\xaf\xe6\xabN\xdd\x0b5\xaaw\x0b\xb8\xf4\xc9\x06:O^\xa8\xa2k\xb0\x7f\xf6=\xee\xa7\xfckd\x15\tI\x8d\xee\x92\x8a%e\xd8\x12\xab\xd7\x94\xb9y\x9b\xcd\x19\x0c\xd9m&^\x1f\x0c\x95\xf0\xd6\xc95\x90^\x03\xe15\x10\\\x03\xc2\x1axa\r\x0c\xad\x81\x9e5P\x8c\x97`y\x08\xabQ9\xc1\xda\x14\n\x84\x01\xceE\xb8\xb2\xc9g\xb3\xfa\xd665z\xa1\x8ec\xe1\xda,\xe2\xca\x15\xe22\x8d\xa5\xc2js\xf2\xdcO\xa7\xff>\xf0\x8dzOC\xd7\xed\xdf;\x11\x8a\xedY\xfb\x8d\xe3cOz\xd74ev\x0el\xdf\xf1\x95\xdd-"h\x1f<\xee(\xff\xf5=\xed\xcf\xdc\xd1\xe8p\xb7\x8f\x04\xbep\xcc\xf5\xe3\to\xb0\xbdy\xc7\x92\xb5um\xbb\xe8\xd7\x0c\xd29\xfb\x1e\x7f\x1b\xff\n\xb1\xe3\xee2!\xb5\x98\xb5\xd5\xd5*\xc1`\xa8R\xf1x\xec_V\xbalg\xa8\xd2b6/\xc5\x8a\x99]f\xce\xc0\x9b\xcdD[j-Q\xe1\x1c-\xc4\x12\x0c\x11\xd3\xe4J\x18Z\t\xd2J@\xe0\x16,\x02&\x9fT\xb2\xe1+o\xf6\x16\x92O\x9aYO\x16V\xa0Y\x99\xa5\xd2\x7f+q\xb2\xe6\xc6\xcd\xd0\x02M\x8d+\xd8\xbalZ\x07%\x8b\xc0R\xe1[\xbb\xee\x06x\xf3\x89\x87\xf6\xe7\xf3\x8b3\xd3\xbf\xdbz\xea\xf1\xa3\x1d\xdb\xa2}\xcb\xd6\x7f\r\xc8=\xf7\r\x1dk\x1fY\xcb\xbf\xf2W_\xbcro\x95go\x06*\xf7\xde\xb9\x85W}%\xb2\xc7\xbb\xff\xc7b\xde\xa9R\xefM\xca\xaeJ\xbaf\xf1{\x1d\xff_X\xb3\xa5dF:L\x16/\xae\xd4\x1b\x0c%\x95%\x0e\xe7R\\\xa9K\x8d\x8b\x11\xb1V\x06C\xa5VK9J\xf2\xa6\xde\x10oz\xda\t\x17\x9d\xf0\xaa\x13*\x9c\xa0rB3"\x8f8!\xe7\x84\xa8\x13\xfa\x9d\xd0\xee\x84F\',w\x82\x9d\xb1e\'p\xc7\x9d0\xe9\x84\xb4\x13\xc2N\x90\x9c\xf0\x86\x13f\x18\xe3\xd4<\xfa\xfc\x86\x1d\xfa\x8bV\xee\xc2u\xbbb\xe1\xc2m\xdf\xfe\xcd\r\x85u\xbbs`7.\xdc[o\xbb\r\x0c|\xb8\xb6yn\xd9\x0e\xf6\r)\xeb\x96\xf53G\x82X\xff\x00\xe6\xc6\x82\xd99*\xed\xae\x020.\xd1Z\x8c\x16\x87\xb3\x8a`\xd1\xab\\UX\xf4\xaa*Cy\xb95\x18*7\x19\xd4;C\x06\xeb\xdc\xc4\xe6\xcf9\xe8\x04\xe2\x84\xcdA6\xfbz\'\x08N09\xe1r1\x01\xc5\x9djn\x97\xbeEi\x14\xda\x1d\x95\xde\xe2"-,\x026U\x0b\xa6\x9e\xb6\x80e\x11\xe0r0\xe3\n\x10\xcc\x16\xc0\xf6w7\xae\x00\xd5\xa6\xbb\xc6\xd6=R_\xff\xf5]\xef\xfc\xe8\'\xe7 \x91\x7f,\x9e\x82\x87\xf7\xc0\xdb\xe5S\'\x82\xe5\xfa\xf5\xae\xba\xf7@\xfd\xd1\x07\xf9\xd1^8\xf9\xec\xd3\xa7O\xd0>\xa0\xd5\xfd5\xff<\xf6\xfa[RL\xa3//3\xa8\x97,\xae\xa8R\xd9\xedU\x16~\xb1\xda\\\x82\xdfm\x97:\x1cR$\xda\xa9rT8\xb8\xe5\x8eFG\xbb#\xea\xf8\x92\xe3i\xc7\xab\x8e\xb7\x1c\x17\x1d:J_\x8eDJ:\x83\xc4\x8b\x8e\x0f\x1d\xa5\xcd*\xa4Q\xb1G\x90\xaaY\xce\xa4)C\xed8;;s\xda\xe1\xee\xa4Oi\x8d\xd1\xd6)9\x80#\x8ez\x07\xa7\xe3\xab*\xca\xcb\x8ce\xc1\x90\xda\xb0d\xb1Jg5\x1a\xed\x1a\x95^\x87{\x07\xa7\xb3\x90\xab\r\xe0+\xb75\x17`\xc0\x14\r\xddRSs\x1b\xa6\xf0\xb6\x0c&\xcb6\xd7\x17\x85\x84U\xd3>\xd0\x03k\x07\x1d`?XJ\xec\x85\x87\x0e\xf8_\xe7w\x1d~;\x7fw\xfe\x9b\x13\xd0\x94\xbf\x9c\x82\xe7\x0e\x7f\xeb\x8d\xbb\xa1w<\xffGh\xf2x<6\xd8\x9e\x9f\xb6x<&x\x1c\x1e\xc2\xf6\xb0\xe7?\x00\x13>-\xf9\xe7\xf2u4w\xb8\xbfk\xaa\xb0O\x1a\xe0Ei\xd6l\xd0,]\xea&\xabVy<n\x03\xef[\xdbP\x17\x0c5\x18W\xb9\x97\x9a\r\x9e\x1aO0\xe42\xd6X\xaa4\x1a\x9d\xae\xa27\xa43\xad\xa4\x8b\xaa\x9a.\xaa\x03>\xd8\xe5\x83u>X\xee\x03\xab\x0f4>\xf8\xc8\x07\x17}\xf0\x96\x0f~\xe0\x83\xa7}\xf0\xa8\x0f\x86}\x00A\x1f\xb4\xfb\xa0\x9e\xc9U\xf8@\xe5\x83\xf8\xe5\xa2\xe0\x19\x1f\xe4| \xf9\xa0\x91\xb1\x91\xf7\xa1\x0f\xde\xf1\xc1\x8c\x0fdf\xe3K>\x88\xfa\x14\x13\x05\x19SQ\xec\r\x1f\xbc\xea\x83\xbf\xf3\xc1q&\xb6\xcf\x077\xfa@(\xfaX_pp\xca\x07a\x1f\xf4\x17}T0\xcd\x8bL\xf3\x11\x1fL\xa2{\xa9f\x1e\xdf\xcet/\xb2\x008\x99\t\xa4\x99{\xf4j\xf4\x81V\xe9\xf7\xa1\xcf?\xb2,<\xd1\xcc{\xa9_U\x9f\'tu\xa3\x98\xdb0\x94\x86)\xee\x19\xf3{\xa3\xb8k\xd8\xe8\xbd\n\xe6^\xf9\x8b\xb8\x92\xcf\xdcI\x02]\xcfJ\xfe\xfd\x8e\xed\xaf\xb7_>\x94\x1fx\xf0\xd4\x12\xbf\xbf\xc5b>\x9ao}```\xf0\x9e\xa3\xf9]\x07\x0f\xc2b>\\\xb3\xa1\xb1\xb9\xa65\xff\xdb\xe2\xee\xf2\xbc\xb6\xb4L\xb5n\xcb\xdcf\x13r\\\xa9\x9a\xdbl\xd8\xfb\xc6\x9d\xef\xe6e\xec#\x1bq\x93{\xa5\x9dN\xa3\xaa\xbc\xdcVYj+]&\xda\xca+\xf0\x84Pa/\x13\x82\xa12\xab\xc3^b\xdf\x19R\x95\x98x\xdc\x87x\xa3$\xc2\xa4\x08D\x84\xe6z\x11.\x880\xc3\xf0\xb0\x08\xd2<\x18\xdfyW\x8fE\x989\xe5]\xe4+\x9e\x06\x94|]\xddR\xe9{h1\xce\xd7V\xd8V+8q\xd9J\xab\xa3\x90"(\xe4\x04_\xc1\x8f\xef\x03-\xb7\xe6\xe8\xd63\xaf\xfd\xc7\x8fn\x1b\xd5<\x9d\x97\x0er\xd1\xc3w\xed\xdf\x11\xba\xf5O\xfch\x95\xe7\x86\xe5\xb5\x1f\xff\xe6\xfd\xfc\xc7\xd6\xce\xd5\xf9J\xaf\xb7\x92\xdf1\xf3\x8f\xee+\xf8\xa6\xc4u\xb3\x1a\'m\xc2\xf3\xa2\x8e|MJ\xab\xf5\xa5:M0\xa4#D\xcd\xabqV\x96\xb7\xf4\xf0\xaa\x1e\xce\xe8\xe1i=<\xa2\x87/\xe9!\xa7\x87\xa8\x1e\x96\xeb\xa1B\x0f*=\x9e\x8f\x98\xc4q=\x1e\x91\xf4\x10\xd6CP\x0f\x92\x1ef\xf4 \xeb\xe1\x14CMz z\xb8\xccP\x94\x9b/\xb6\xa0i\x94\xe3\xd1\x82\x9e\xbbzN\xc6\x9c\xe0\x0er\xb5\x01R\xf4\x14t\n\x02\x81\xb93\x1e\x90\xfbg\x7f\t\x87\xc8\xcf\xf0\x8cW)\xe9\x89Fc(\xe3uO\xde\xcc/&-\xca\xf9\n-\xcc;\\\xc1!\x7fc\xa3?\xe0\xf3\x05\xf64tv6\xf8\x02\x01\xf6o\x0b\\\xd5\x89\xbb\xff\xa4\xfb\xcd\x90q\xe3\x1f\x88\xab\xf0\xbb\xf6\xbf\xb4\xbf\xf1\x93\xab\xbfZ\xe6\xbb5Uj\xfak\xaf\x16\xfb\xa5p\xa1^\x89;\xef\'7\xcd\t\xc15?u.\xd24\xe3\xb7\xa3_\x92j\x15!\x15\\3\xa9\xe1\x1d\xa4\x9f\xaa\xf3GI\'\xd2\xbc\xf8\x0c\xe2\xb3\x1c\xe5j\xf0\xe9F\x99\xd5\x1cQ~-\xfe\x1e\xec\x80\xefqk\xf0s\x92_\xc3\x9fRmV\x0f\xab\x7f\xae\x914\xc3\x8a\xa7Ed\xad\x12\x0bGLx\x9e\xd8\x83\xc0\xf7\xf9\x1f\x10\x9eq\x9d\x90\x9c\x8bg\xd7\\l\x80\x92\xbb\x14\x98#%dT\x81y|\xffL(\xb0\ne\x8e(\xb0\x9a\x94\x91\xc7\x15XC\x8c\xe4\xeb\n\\B\xee g\x14X\x8b\xdf\xfd\xea\x14XG\x16A\xab\x02\x97B\x12\x82\n\xac\'K\xb9\xef\xce\xfd+N\x1d\xf7s\x05.#M\xbcV\x81\x17\x91%\xfc&\x1a\xbd\x8a\xfe\xfa\xfc<\x7f\x93\x02\x03\x11T\xbc\x02sd\x91JT`\x9e\xacS5(\xb0\ne\xc6\x14XM\x96\xa8\xeeW`\rq\xaa\xbe\xaa\xc0%\xe4C\xd59\x05\xd6\x92U\xea\xd3\n\xac#K\xd5\xef(p)\xf7\x0b\xf5\x7f+\xb0\x9e\xac\xd7\xfeT\x81\rd\x8fN\xaf\xc0e\xe4V]\xd1\xd7"\xd2\xa8{\xb3=1\x96\xc8%\xee\x88E\x85h$\x17\x11FR\xe9C\x99\xc4X<\'\xac\x1aY-\xac\xado\xa8\x17:R\xa9\xb1\xf1\x98\xd0\x96\xca\xa4S\x99H.\x91J\xd6\x95\xb6]+\xb6V\xe8E\x13\x9d\x91\\\xad\xb059R\xd7\x9d\x18\x8e\x15d\x85\xbeX&1\xda\x1b\x1b\xdb?\x1e\xc9l\xc9\x8e\xc4\x92\xd1XF\xf0\x08\xd7J\\\x8b\xef\x8ae\xb2\x14Y[\xd7P\xd7t\x95y\xadl"+D\x84\\&\x12\x8dMD2\xfb\x84\xd4\xe8\xc28\x84Ll,\x91\xcd\xc52HL$\x85\x81\xba\xbe:!\x18\xc9\xc5\x929!\x92\x8c\n\xfds\x8a=\xa3\xa3\x89\x91\x18#\x8e\xc42\xb9\x08\n\xa7rq\x8c\xf4\xd6\xfd\x99D6\x9a\x18\xa1\xde\xb2us\x13\x98\x97\x8d\xbe\\\xec@L\xd8\x1e\xc9\xe5b\xd9T\xb25\x92E_\x18Y\x7f"\x99\xca\xd6\n\x07\xe3\x89\x91\xb8p0\x92\x15\xa2\xb1lb,\x89\xcc\xe1C\xc2B\x1d\x01\xb9\x11\x9cK2\x99:\x80&\x0f\xc4j1\xee\xd1L,\x1bO$\xc7\x84,\x9d\xb2\xa2-\xe4\xe2\x91\x1c\x9d\xf4D,\x97I\x8cD\xc6\xc7\x0fa\xc9&\xd2\xa85\x8c5:\x98\xc8\xc5\xd1\xf1D,+\xec\x88\x1d\x14zS\x13\x91\xe4su\x85P07\xa3\x98S!1\x91\xce\xa4\x0e\xb0\x18=\xd9\x91L,\x96Dg\x91hd81\x9e\xc8\xa1\xb5x$\x13\x19\xc1\x8ca\xda\x12#Y\x96\x11L\x84\x90\x8e$=\xfe\xfd\x99T:\x86\x91\xde\xd4\xd1}U\x10\x03,d3\x9b\x1a?\x80\x9e\xa9t2\x16\x8bR\x8f\x18\xf6\x81\xd88*\xa1\xe3\xf1Tj\x1f\x9d\xcfh*\x83\x81Fsq\xcf\xbc\xc8GS\xc9\x1c\xaa\xa6\x84H4\x8a\x13\xc7l\xa5F\xf6O\xd0:a\x9as\xc5\xe0"#\x99\x14\xf2\xd2\xe3\x91\x1cZ\x99\xc8\xd6\xc5s\xb9\xf4\x06\xaf\xf7\xe0\xc1\x83u\x11\xa54#X\x99:\xb4\xec\xfd<^\xeeP:\xa6\xd4#C\xadL\x8cwc\xf9\x93\xb4t\xfbY}\xe9$\xfa\xb6v\x0b=i\xccO\x00\x83\x13\x14\x81Z\xa1\xd8\x99\ru\r\x8a\x0bLc"\x9d\xcb\xd6e\x13\xe3u\xa9\xcc\x98\xb7\'\xd0M\xdaI\x82\x8c\xe1\xc8\xe1\xb8\x83\xc4H\x94\x088"\x88G\x10\x1a!)\x92&\x87H\x86I\xc5\x91*\xe0\x17\xe0\x11|\xb9\t\xb81\xd6\x93\x06\x1c\x02\xe9@\xa9\x14\xf2\xc7Q_ m\x08gP\x8b\xde#\xccn\x8a$I\x1d)e\x9c\xcf\xb7\xb6\x16\xa1^%\x8aN\xa6]\x8b\xd0V\xd4\x1fA\x0b\xdd\xa87\x8c\xdc\xf9v\x05\xd2\xc7(\t\xdcf\xa9\xe6\x18\xd9\x8fqD\x90\xb2\x85dQ+\x862Q&!\x10\x0f\x8e?g\xe3\xcf\xf1w1(;\xc7Y\x8bq5\xe0h\xba\xae\xe6\x9f\xb3\x9b@K\x02\xcbt\x8eqh\xa4\x13,\xfa}HK\xa1\xde\xe7\xe5C@\xb9\x18\xab^\x1691\x86E\x99Uj{\x00%\xfa\x98T\x90i\xd2L\xe4\x98\xb7$\x93\xea\xbf\x8e\xc7\x1e\xf48\x8a\xfa#\xac\x92E\xc9\x11f\x9bvD\xc1r\n\xe1\xb8\x92\xd3[1\xdf\x19\x16A\x94\xe9\x15\xe7\x96E\xcf\x9f\xae\xc0\xf5{\xa3\x8fEw\x80\xf9\xdc\xce\xe8\x14\xcf2^+\xe2Ye^\x85\x9c\xf5\xb3(RH\xa5\xb98\x88\x91P\xbfq\x06GX>\xa3L\x9b\xf6XR\xd1\x1c\xc6\xae\x13>\xd7\x8f\xa0\xe8F\x94\xba$\x99\x8f\x03J\x94T\xa7V\xc9\xf7(\xbbg\x99\xdf$\xfa\x10X|\x85*/\xf4-\xb0<EX\xd6\x0b\x95\x9e@n\x8e\xc9\x8e }\x1c?\x87\x94U6\x81Y)\xf8\x1aV\xd6\xd1A\xb6*\xe3\xca\x8c\'\x98]\x81\xec\xc0\xe7A\xd6\x15)V\xb7\xa4{\x19\xab\xf1\xd5\xac\x14\xfafT\xe9S\x81\xe9\xa6\x11N\xb1Y\x14\xf3\xe8a\xb5\xa13\x89\xb1H)\x14a+\x7f\x185\xc6\x99\xefBlq\xd6\x1d\x11V\xdb\x98R\xeb\x1c\x9bA1_Qe\xa64\xea4\xa3x\x88\x9f\xf5\x05]\xef1%\xa77\xe1>\xd1}]\x8b\x85\x0c\xce\xefMZ\x93q\x16ov\x9e\xed$\x8b6:7\xc7B\xb6\xa9\xd4\xb8\xe2\xa90\xe3q\xb6\x1f\xed\x9b\xab\xcf(\xeb\xb7BF\xa3\xcc\x9a\xe73r>\xcar\x93S\xbc\xa6XDQ\xfc\x14*^\xe8\xad\x14\xea\xeeg\xf5(\xac\xa7B7\xe7>\x95\xb9\x08\xcboJ\xd1K\xb3])\xa7\xc42\xc1\xd6G\x9cu`\x9al\xc0\x83\xa5\x17\xa3\xa3\x9f:\xd6\x87\xf3W\xcd\x88\xb2f\xea\x94\x98\xbd\x7f\xb1\x1e\x8d+\xcd28\x7f}d\xe6b\x99\xc0\x18\xbb\x95\xd5\x9f\x9c[u\xfb\xe7\xad\xdfb%\xfap\x0f\xeaf\xfbEZ\xe9\x9f\x80\x929\xe1\x1a\x0bt\xd5\\\xbbg6\xb0=s\xe1,\n\xdd\x98@<\xc7\xe2\xc9\xb2\\\xd6\xb19\x8c!\xbf\x07=t\xd334\xbbf\xef%\xd1\xeb\xfc\xb7\x072\xad\x0bn\x19\x86\x18\x01\x88\xc3\x18YL\\\x10&;`\x88\x0c\xc0\x16\xb2\t$|J\xc8k\xc5g\x1b\xe2\xf4Y\x07\x9b\xc8$\xcamB\xfaf\xc47"\xfdF\xdc;]xo\xc1\xd1\x83\xe3\x18\x0e\x15\x8e\x82D=Jx\xf1\xe9Up\x0f\xe2\xb5\xa8\xf1:\xde\x81\rJmA*}nC\xbc\x13\x9f\x1d\xca3\x80t?>\xfd\n\xbe\x15q|\x920\x94\xe0!\xbc\x85\xdd\xcf\x81J:\r\x17\xae\xc0\xebW@\xb8\x02w}\x02\xc1O`\xf2\x83\xe3\x1fp\xbf\xbb\xbc\xda\xf5\xc2\xe5s\x97\xb9\x9e\xf7\x87\xde\x7f\xe1}\xbe\xfe}0\xbe\x0fZr\xc9t)x)|)}\xe9\xd4%M\xa9\xf1=0\x90\xdf\x82\xf9\x97\x17\xd6\xbb\xde\xddt~\xe0?7\xfdb\x80\x9c\xc7\x99\x9d\xaf?\x1f<?y^>\xaf>\x0f\xfc\xc0/x\xab\xcb4#\xcc\xd4\xcf\xa4g&g\xde\x98\xb90syF;\xf9\xdd\xe3\xdf\xe5\xfe\xe9e\xaf\xcb\xf8\xb2\xebe\xceu\xba\xe7\xf4]\xa7\xf9\xf0\xb3`|\xd6\xf5,\x17|2\xfc$w\xfc$\x18O\xbaNzO\xf2O\x9c\xa8s\x9d\xe8p\xba\x1e{t\xa5\xeb\xc2\xa3\x97\x1f\xe5\xe8\x8f^\x8f\x96\x99\x03/C\x0ft\x93M\x98\xc3\x1d\xa7\xf9Y\xd7\x0b[,\xb0\x1d\xa7e\xc4\xbb\x0b\x87\x17G\x0f\x8e\x14\x8ec8\xf0;\x0f\x8a\xbbpx\xa1[Z\xcf\x0f\xfd5\xe8\x1f\xb6?\\\xf3\xf0\x9d\x0f?\xf0\xb0:}\xdf\xe4}\xc7\xef\xe3\'\xef=~/\xf7\xc2\x81s\x07\xb8lp\xb5+\x95\xacq%;\xd6\xb8\xaa|\x95\x03%>~@\x83n\xe8Om[\x87\xabW\x05\xc2C\x92k\x08\x85n\xde]\xef\xda\xdd\xb1\xda\xb5\xd8W>\xa0\xc6\t\xabP\xd0\xc8\xbb\xf8\x16\xbe\x87O\xf1\xc7\xf8s|\x89\xb67\xe8t\xed\xc4q!x9\xc8IA\x9d!`\xecq\xf5x{\xf8\xb3\xb3\x17\xa4X\x97\x1b\xadmKo\x9b\xdc\xc6o\r\xacvuv\xacw\x19;\\\x1d\xde\x8e\xd7;\xde\xedx\xbfC3\xd4\x01O\xe1_\xe0\x85\xc0\xb9\x00/\x05V{\x03R\xc0\xe9\x0e,\xed\xb4\x0fX}\x96\x013\x18\x07L>\xe3\x00\x07Xh\x1f\x19\xf0\x1ag\x8d\x9c\xd18d\xbc\xcb\xc8\x1bI\x0b\xe1&\xad\xa0\x86\xb3p|\xba\xbf\xaf\xa6\xa6\xebl\xc9lo\x97\xac\r\xde,\xc3\x11\xb9\xba\x8f\xde\xa5\x9d\xbbe\xcd\x11\x99\x0c\xec\xbeyp\x1a\xe0\xcb\xa1{\x8f\x1e%\xad\x8e.ym\xdf\xa0\x1cv\x84\xba\xe4(\x02\x12\x05&\x1109\xa6\xad\xa45\x94\xcd\xe6j\xd8\x0555\x08\xef\xc7;\xa9\xd9_\x83\xc4\xbd\xd9\x02\x95\xcc\xf1IM\x16\xb2\xb8Ee\x99\x12\xd4P\x81\x02\x0ex\xaf\xa1<$P=@\xed\xbdYBo\x94YSP\xa2\xdaY\xc5\x1cS.\xdc\x18P\xb9\xf7\x7f\x00C\xc6"H\nendstream\nendobj\n\n6 0 obj\n6132\nendobj\n\n7 0 obj\n<</Type/FontDescriptor/FontName/BAAAAA+LiberationSerif\n/Flags 4\n/FontBBox[-543 -303 1277 981]/ItalicAngle 0\n/Ascent 0\n/Descent 0\n/CapHeight 981\n/StemV 80\n/FontFile2 5 0 R\n>>\nendobj\n\n8 0 obj\n<</Length 284/Filter/FlateDecode>>\nstream\nx\x9c]\x91\xcbn\x84 \x14\x86\xf7<\x05\xcb\xe9b"\xea8\x97\xc4\x98Lu&q\xd1Kj\xfb\x00\nGKR\x81 \xb3\xf0\xed\xcb\x81i\x9bt\x01\xf9\xce\xe5?9\xfc$u\xdb\xb4J\xba\xe4\xd5j\xde\x81\xa3\xa3T\xc2\xc2\xa2o\x96\x03\x1d`\x92\x8a\xa4\x19\x15\x92\xbb{\x14n>\xf7\x86$^\xdb\xad\x8b\x83\xb9U\xa3.K\x92\xbc\xf9\xda\xe2\xecJ7g\xa1\x07x \xc9\x8b\x15`\xa5\x9a\xe8\xe6\xa3\xee|\xdc\xdd\x8c\xf9\x82\x19\x94\xa3\x8cT\x15\x150\xfa9O\xbdy\xeegH\x82j\xdb\n_\x96n\xddz\xc9_\xc3\xfbj\x80f!N\xe3*\\\x0bXL\xcf\xc1\xf6j\x02R2V\xd1\xf2z\xad\x08(\xf1\xaf\x96\xe6Q2\x8c\xfc\xb3\xb7\xbe5\xf5\xad\x8c\x15\xbb\xcas\x16x\x7fD\xce#\x9f\x90w\x81\x0f9r\x118c\xc8\xfb\xd8\x93"\x1f"_\x90\x8f\x91\x0b\xe4S\xd4\x86\x99\xe7\x98o\x90\x1fc>\xcc\xa9c\xbeFn\xe2\xfcKX\xfe\xbe%>\x03}\xfe\xb1\x87\xf2\x9b\xb5\xde\x9a\xf0\x19\xc1\x13tC*\xf8\xfd/\xa3\r\xaa\xc2\xf9\x06\xe1d\x89\xc3\nendstream\nendobj\n\n9 0 obj\n<</Type/Font/Subtype/TrueType/BaseFont/BAAAAA+LiberationSerif\n/FirstChar 0\n/LastChar 13\n/Widths[777 610 500 277 389 250 443 500 443 500 777 500 277 250 ]\n/FontDescriptor 7 0 R\n/ToUnicode 8 0 R\n>>\nendobj\n\n10 0 obj\n<</F1 9 0 R\n>>\nendobj\n\n11 0 obj\n<</Font 10 0 R\n/ProcSet[/PDF/Text]\n>>\nendobj\n\n1 0 obj\n<</Type/Page/Parent 4 0 R/Resources 11 0 R/MediaBox[0 0 595.303937007874 841.889763779528]/Group<</S/Transparency/CS/DeviceRGB/I true>>/Contents 2 0 R>>\nendobj\n\n4 0 obj\n<</Type/Pages\n/Resources 11 0 R\n/MediaBox[ 0 0 595.303937007874 841.889763779528 ]\n/Kids[ 1 0 R ]\n/Count 1>>\nendobj\n\n12 0 obj\n<</Type/Catalog/Pages 4 0 R\n/OpenAction[1 0 R /XYZ null null 0]\n/Lang(en-US)\n>>\nendobj\n\n13 0 obj\n<</Creator<FEFF005700720069007400650072>\n/Producer<FEFF004C0069006200720065004F0066006600690063006500200037002E0033>\n/CreationDate(D:20250917150537+02\'00\')>>\nendobj\n\nxref\n0 14\n0000000000 65535 f \n0000007323 00000 n \n0000000019 00000 n \n0000000223 00000 n \n0000007492 00000 n \n0000000243 00000 n \n0000006460 00000 n \n0000006481 00000 n \n0000006671 00000 n \n0000007024 00000 n \n0000007236 00000 n \n0000007268 00000 n \n0000007617 00000 n \n0000007714 00000 n \ntrailer\n<</Size 14/Root 12 0 R\n/Info 13 0 R\n/ID [ <C2C1F6A050C786B30EE11FD1DE9DD1C0>\n<C2C1F6A050C786B30EE11FD1DE9DD1C0> ]\n/DocChecksum /15B7A856C04669751E96C5032A6AFA37\n>>\nstartxref\n7889\n%%EOF\n""",
            },
            "tiff-bad.tiff": {
                "name": "tiff-bad.tiff",
                "mimetype": "image/tiff",
                "data": b"I*\x00\x14\x00\x00\x00Lk\x97*.2*.2Lk\x97\x11\x00\x00\x01\x03\x00\x01\x00\x00\x00\x02\x00\x00\x00\x01\x01\x03\x00\x01\x00\x00\x00\x02\x00\x00\x00\x02\x01\x03\x00\x03\x00\x00\x00\xf6\x00\x00\x00\x03\x01\x03\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x01\x03\x00\x01\x00\x00\x00\x02\x00\x00\x00\x11\x01\x04\x00\x01\x00\x00\x00\x08\x00\x00\x00\x12\x01\x03\x00\x01\x00\x00\x00\x01\x00\x00\x00\x15\x01\x03\x00\x01\x00\x00\x00\x03\x00\x00\x00\x16\x01\x03\x00\x01\x00\x00\x00\x80\x00\x00\x00\x17\x01\x04\x00\x01\x00\x00\x00\x0c\x00\x00\x00\x1a\x01\x05\x00\x01\x00\x00\x00\xe6\x00\x00\x00\x1b\x01\x05\x00\x01\x00\x00\x00\xee\x00\x00\x00\x1c\x01\x03\x00\x01\x00\x00\x00\x01\x00\x00\x00\x1d\x01\x02\x00\x0c\x00\x00\x00\xa2\x03\x00\x00(\x01\x03\x00\x01\x00\x00\x00\x02\x00\x00\x00S\x01\x03\x00\x03\x00\x00\x00\xfc\x00\x00\x00s\x87\x07\x00\xa0\x02\x00\x00\x02\x01\x00\x00\x00\x00\x00\x00,\x01\x00\x00\x01\x00\x00\x00,\x01\x00\x00\x01\x00\x00\x00\x08\x00\x08\x00\x08\x00\x01\x00\x01\x00\x01\x00\x00\x00\x02\xa0lcms\x040\x00\x00mntrRGB XYZ \x07\xe7\x00\x0c\x00\x05\x00\x08\x00\x17\x008acspAPPL\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf6\xd6\x00\x01\x00\x00\x00\x00\xd3-lcms\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\rdesc\x00\x00\x01 \x00\x00\x00@cprt\x00\x00\x01`\x00\x00\x006wtpt\x00\x00\x01\x98\x00\x00\x00\x14chad\x00\x00\x01\xac\x00\x00\x00,rXYZ\x00\x00\x01\xd8\x00\x00\x00\x14bXYZ\x00\x00\x01\xec\x00\x00\x00\x14gXYZ\x00\x00\x02\x00\x00\x00\x00\x14rTRC\x00\x00\x02\x14\x00\x00\x00 gTRC\x00\x00\x02\x14\x00\x00\x00 bTRC\x00\x00\x02\x14\x00\x00\x00 chrm\x00\x00\x024\x00\x00\x00$dmnd\x00\x00\x02X\x00\x00\x00$dmdd\x00\x00\x02|\x00\x00\x00$mluc\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x0cenUS\x00\x00\x00$\x00\x00\x00\x1c\x00G\x00I\x00M\x00P\x00 \x00b\x00u\x00i\x00l\x00t\x00-\x00i\x00n\x00 \x00s\x00R\x00G\x00Bmluc\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x0cenUS\x00\x00\x00\x1a\x00\x00\x00\x1c\x00P\x00u\x00b\x00l\x00i\x00c\x00 \x00D\x00o\x00m\x00a\x00i\x00n\x00\x00XYZ \x00\x00\x00\x00\x00\x00\xf6\xd6\x00\x01\x00\x00\x00\x00\xd3-sf32\x00\x00\x00\x00\x00\x01\x0cB\x00\x00\x05\xde\xff\xff\xf3%\x00\x00\x07\x93\x00\x00\xfd\x90\xff\xff\xfb\xa1\xff\xff\xfd\xa2\x00\x00\x03\xdc\x00\x00\xc0nXYZ \x00\x00\x00\x00\x00\x00o\xa0\x00\x008\xf5\x00\x00\x03\x90XYZ \x00\x00\x00\x00\x00\x00$\x9f\x00\x00\x0f\x84\x00\x00\xb6\xc4XYZ \x00\x00\x00\x00\x00\x00b\x97\x00\x00\xb7\x87\x00\x00\x18\xd9para\x00\x00\x00\x00\x00\x03\x00\x00\x00\x02ff\x00\x00\xf2\xa7\x00\x00\rY\x00\x00\x13\xd0\x00\x00\r[chrm\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\xa3\xd7\x00\x00T|\x00\x00L\xcd\x00\x00\x99\x9a\x00\x00&g\x00\x00\x0f\\mluc\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x0cenUS\x00\x00\x00\x08\x00\x00\x00\x1c\x00G\x00I\x00M\x00Pmluc\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x0cenUS\x00\x00\x00\x08\x00\x00\x00\x1c\x00s\x00R\x00G\x00BHintergrund\x00\r",
            },
        },
    }


@dataclass
class Record:
    """
    Record-dataclass

    Contains all information to generate a GetRecord-response.
    """

    identifier: str
    status: Optional[str] = None
    timestamp: Optional[int] = None
    dc_author: Optional[str] = None
    dc_title: Optional[str] = None
    dc_identifier: Optional[str] = None
    dc_rights: Optional[str] = None


def get_record_range(
    records: list[Record],
    *,
    from_ts: Optional[int] = None,
    until_ts: Optional[int] = None,
):
    """
    Returns subset of relevant records (from range of timestamps).
    The list `records` must always be sorted by timestamp.
    """
    timestamps = [r.timestamp for r in records]
    if from_ts is not None:
        i = bisect.bisect_left(timestamps, from_ts)  # first >= from_ts
    else:
        i = 0
    if until_ts is not None:
        j = bisect.bisect_right(timestamps, until_ts)  # first > until_ts
    else:
        j = len(records)
    return records[i:j]


def get_random_record(config: OAIPMHAppConfig) -> Record:
    """Returns random `Record` based on `config`."""
    r = Record(
        config.DELIMITER.join(
            [
                config.SCHEME,
                config.REPOSITORY_IDENTIFIER,
                str(uuid3(config.UUID_NAMESPACE, name=str(random()))),
            ]
        )
    )
    if random() < config.OAI_DELETED_RATE:
        r.status = "deleted"
    r.timestamp = randrange(
        config.EARLIEST_DATETIMESTAMP, config.LATEST_DATETIMESTAMP
    )
    r.dc_author = ", ".join(
        [
            choice(config.RECORD_DATA["lastnames"]),
            choice(config.RECORD_DATA["firstnames"]),
        ]
    )
    noun1 = choice(config.RECORD_DATA["title_nouns"])
    noun2 = choice(
        [s for s in config.RECORD_DATA["title_nouns"] if s != noun1]
    )
    adjective = choice(config.RECORD_DATA["title_adjective"])
    r.dc_title = choice(config.RECORD_DATA["titles"]).format(
        noun1=noun1, adjective=adjective, noun2=noun2
    )
    r.dc_rights = choice(config.RECORD_DATA["rights"])
    if r.status == "deleted" or random() < config.OAI_EMPTY_PAYLOAD_RATE:
        r.dc_identifier = None
    else:
        r.dc_identifier = choice(
            config.RECORD_DATA[
                (
                    "files_bad"
                    if random() < config.OAI_INVALID_PAYLOAD_RATE
                    else "files_good"
                )
            ]
        )
    return r


def app_factory(config: OAIPMHAppConfig):
    """Returns OAI-PMH-stub."""
    _app = Flask(__name__)

    # generate records
    seed(config.RANDOM_SEED)
    records_raw = sorted(
        [get_random_record(config) for _ in range(config.REPOSITORY_SIZE)],
        key=lambda r: r.timestamp,
    )
    seed(str(uuid4()))
    # generate record-indices
    records_by_identifier = {r.identifier: r for r in records_raw}
    sets = {
        "singular": {
            "name": "Singular record",
            "records": [choice(records_raw)],
        },
        "few": {
            "name": "Few records",
            "records": choices(
                records_raw, k=floor(0.01 * config.REPOSITORY_SIZE)
            ),
        },
        "several": {
            "name": "Several records",
            "records": choices(
                records_raw, k=floor(0.05 * config.REPOSITORY_SIZE)
            ),
        },
        "many": {
            "name": "Many records",
            "records": choices(
                records_raw, k=floor(0.5 * config.REPOSITORY_SIZE)
            ),
        },
        "all": {
            "name": "All records",
            "records": records_raw,
        },
    }

    def get_response_bad_argument(name: str, reason: str):
        return Response(
            f"""<?xml version="1.0" encoding="UTF-8"?>
<OAI-PMH xmlns="http://www.openarchives.org/OAI/2.0/"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/
  http://www.openarchives.org/OAI/2.0/OAI-PMH.xsd">
  <responseDate>{datetime.now().isoformat()}</responseDate>
  <request>http://arXiv.org/oai2</request>
  <error code="badArgument">Bad argument '{name}' ({reason}).</error>
</OAI-PMH>""",
            mimetype="application/xml",
            status=200,
        )

    def get_response_cannot_disseminate_format(name: str):
        return Response(
            f"""<?xml version="1.0" encoding="UTF-8"?>
<OAI-PMH xmlns="http://www.openarchives.org/OAI/2.0/"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/
  http://www.openarchives.org/OAI/2.0/OAI-PMH.xsd">
  <responseDate>{datetime.now().isoformat()}</responseDate>
  <request>http://arXiv.org/oai2</request>
  <error code="cannotDisseminateFormat">Bad format '{name}'.</error>
</OAI-PMH>""",
            mimetype="application/xml",
            status=200,
        )

    # define endpoints
    def oai_identify():
        return Response(
            f"""<?xml version="1.0" encoding="UTF-8"?>
<OAI-PMH xmlns="http://www.openarchives.org/OAI/2.0/"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/
         http://www.openarchives.org/OAI/2.0/OAI-PMH.xsd">
  <responseDate>{datetime.now().isoformat()}</responseDate>
  <Identify>
    <repositoryName>{config.REPOSITORY_NAME}</repositoryName>
    <baseURL>{config.OAI_BASE_PATH}</baseURL>
    <protocolVersion>2.0</protocolVersion>
    <earliestDatestamp>2020-01-01T00:00:00Z</earliestDatestamp>
    <deletedRecord>persistent</deletedRecord>
    <granularity>YYYY-MM-DD</granularity>
    <description>
      <oai-identifier
        xmlns="http://www.openarchives.org/OAI/2.0/oai-identifier"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation=
            "http://www.openarchives.org/OAI/2.0/oai-identifier
        http://www.openarchives.org/OAI/2.0/oai-identifier.xsd">
        <scheme>{config.SCHEME}</scheme>
        <repositoryIdentifier>{config.REPOSITORY_IDENTIFIER}</repositoryIdentifier>
        <delimiter>{config.REPOSITORY_IDENTIFIER}</delimiter>
        <sampleIdentifier>{config.DELIMITER.join([config.SCHEME, config.REPOSITORY_IDENTIFIER, str(uuid4())])}</sampleIdentifier>
      </oai-identifier>
    </description>
  </Identify>
</OAI-PMH>""",
            mimetype="application/xml",
            status=200,
        )

    def oai_list_metadata_formats():
        return Response(
            f"""<?xml version="1.0" encoding="UTF-8"?>
<OAI-PMH xmlns="http://www.openarchives.org/OAI/2.0/"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/
         http://www.openarchives.org/OAI/2.0/OAI-PMH.xsd">
  <responseDate>{datetime.now().isoformat()}</responseDate>
  <ListMetadataFormats>
   <metadataFormat>
     <metadataPrefix>oai_dc</metadataPrefix>
      <schema>http://www.openarchives.org/OAI/2.0/oai_dc.xsd
      </schema>
      <metadataNamespace>http://www.openarchives.org/OAI/2.0/oai_dc/
      </metadataNamespace>
    </metadataFormat>
  </ListMetadataFormats>
</OAI-PMH>""",
            mimetype="application/xml",
            status=200,
        )

    def oai_list_sets():
        sets_xml = [
            f"<set><setSpec>{key}</setSpec><setName>{value['name']}</setName></set>"
            for key, value in sets.items()
        ]

        return Response(
            f"""<?xml version="1.0" encoding="UTF-8"?>
<OAI-PMH xmlns="http://www.openarchives.org/OAI/2.0/"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/
         http://www.openarchives.org/OAI/2.0/OAI-PMH.xsd">
  <responseDate>{datetime.now().isoformat()}</responseDate>
  <ListSets>
    {"".join(sets_xml)}
 </ListSets>
</OAI-PMH>""",
            mimetype="application/xml",
            status=200,
        )

    def oai_list_identifiers():
        if "metadataPrefix" not in request.args:
            return get_response_bad_argument("metadataPrefix", "missing")
        if request.args["metadataPrefix"] != "oai_dc":
            return get_response_cannot_disseminate_format(
                request.args["metadataPrefix"]
            )
        if request.args.get("set", "all") not in sets:
            return get_response_bad_argument(
                "set", f"unknown value '{request.args['set']}'"
            )
        records_str = [
            f"""<header{'' if record.status is None else ' status="deleted"'}>
              <identifier>{record.identifier}</identifier>
              <datestamp>{datetime.fromtimestamp(record.timestamp).isoformat()}</datestamp>
            </header>
            """
            for record in filter(
                lambda r: r in sets[request.args.get("set", "all")]["records"],
                get_record_range(
                    records_raw,
                    from_ts=(
                        None
                        if "from" not in request.args
                        else int(
                            datetime.fromisoformat(
                                request.args["from"]
                            ).timestamp()
                        )
                    ),
                    until_ts=(
                        None
                        if "until" not in request.args
                        else int(
                            datetime.fromisoformat(
                                request.args["until"]
                            ).timestamp()
                        )
                    ),
                ),
            )
        ]
        if len(records_str) == 0:
            return Response(
                f"""<?xml version="1.0" encoding="UTF-8"?>
<OAI-PMH xmlns="http://www.openarchives.org/OAI/2.0/"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/
  http://www.openarchives.org/OAI/2.0/OAI-PMH.xsd">
  <responseDate>{datetime.now().isoformat()}</responseDate>
  <request>http://arXiv.org/oai2</request>
  <error code="noRecordsMatch">No records match.</error>
</OAI-PMH>""",
                mimetype="application/xml",
                status=200,
            )
        return Response(
            f"""<?xml version="1.0" encoding="UTF-8"?>
<OAI-PMH xmlns="http://www.openarchives.org/OAI/2.0/"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/
         http://www.openarchives.org/OAI/2.0/OAI-PMH.xsd">
  <responseDate>{datetime.now().isoformat()}</responseDate>
  <ListIdentifiers>
    {''.join(records_str)}
  </ListIdentifiers>
</OAI-PMH>""",
            mimetype="application/xml",
            status=200,
        )

    def oai_get_record():
        if "metadataPrefix" not in request.args:
            return get_response_bad_argument("metadataPrefix", "missing")
        if request.args["metadataPrefix"] != "oai_dc":
            return get_response_cannot_disseminate_format(
                request.args["metadataPrefix"]
            )
        if "identifier" not in request.args:
            return get_response_bad_argument("identifier", "missing")
        if (
            request.args["identifier"] != "random"
            and request.args["identifier"] not in records_by_identifier
        ):
            return Response(
                f"""<?xml version="1.0" encoding="UTF-8"?>
<OAI-PMH xmlns="http://www.openarchives.org/OAI/2.0/"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/
  http://www.openarchives.org/OAI/2.0/OAI-PMH.xsd">
  <responseDate>{datetime.now().isoformat()}</responseDate>
  <request>http://arXiv.org/oai2</request>
  <error code="idDoesNotExist">Unknown id '{request.args['identifier']}'</error>
</OAI-PMH>""",
                mimetype="application/xml",
                status=200,
            )

        if request.args["identifier"] == "random":
            record = get_random_record(config)
        else:
            record = records_by_identifier[request.args["identifier"]]

        if record.dc_identifier is None:
            dc_identifier = ""
        else:
            dc_identifier = f"""<dc:identifier>{
                request.url_root + "files/" + record.dc_identifier
            }</dc:identifier>"""

        return Response(
            f"""<?xml version="1.0" encoding="UTF-8"?>
<OAI-PMH xmlns="http://www.openarchives.org/OAI/2.0/"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/
         http://www.openarchives.org/OAI/2.0/OAI-PMH.xsd">
  <responseDate>{datetime.now().isoformat()}</responseDate>
  <GetRecord>
    <record>
      <header{' status="deleted"' if record.status == 'deleted' else ''}>
        <identifier>{record.identifier}</identifier>
        <datestamp>{datetime.fromtimestamp(record.timestamp).isoformat()}</datestamp>
      </header>
      <metadata>
        <oai_dc:dc
          xmlns:oai_dc="http://www.openarchives.org/OAI/2.0/oai_dc/"
          xmlns:dc="http://purl.org/dc/elements/1.1/"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/oai_dc/
          http://www.openarchives.org/OAI/2.0/oai_dc.xsd">
          <dc:title>{record.dc_title}</dc:title>
          <dc:creator>{record.dc_author}</dc:creator>
          <dc:date>{datetime.fromtimestamp(record.timestamp).isoformat()}</dc:date>
          {dc_identifier}
          <dc:rights>{record.dc_rights}</dc:rights>
        </oai_dc:dc>
      </metadata>
    </record>
  </GetRecord>
</OAI-PMH>""",
            mimetype="application/xml",
            status=200,
        )

    @_app.route(config.OAI_BASE_PATH, methods=["GET"])
    def oai_entrypoint():
        """OAI-PMH endpoint."""
        # handle latency and error-rates
        sleep(
            max(
                0,
                config.OAI_LATENCY_LOWER
                + random()
                * (config.OAI_LATENCY_UPPER - config.OAI_LATENCY_LOWER),
            )
        )
        if random() < config.OAI_ERROR_RATE:
            return Response(
                "INTERNAL ERROR", mimetype="text/plain", status=500
            )
        if random() < config.OAI_BUSY_RATE:
            return Response("BUSY", mimetype="text/plain", status=503)

        if "verb" not in request.args:
            return get_response_bad_argument("verb", "missing")

        match request.args["verb"]:
            case "Identify":
                return oai_identify()
            case "ListMetadataFormats":
                return oai_list_metadata_formats()
            case "ListSets":
                return oai_list_sets()
            case "ListIdentifiers":
                return oai_list_identifiers()
            case "GetRecord":
                return oai_get_record()

        return Response(
            f"""<?xml version="1.0" encoding="UTF-8"?>
<OAI-PMH xmlns="http://www.openarchives.org/OAI/2.0/"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/
  http://www.openarchives.org/OAI/2.0/OAI-PMH.xsd">
  <responseDate>{datetime.now().isoformat()}</responseDate>
  <request>http://arXiv.org/oai2</request>
  <error code="badVerb">Bad verb '{request.args['verb']}'.</error>
</OAI-PMH>""",
            mimetype="application/xml",
            status=200,
        )

    @_app.route("/files/<filename>", methods=["GET"])
    def get_file(filename: str):
        # handle latency and error-rates
        sleep(
            max(
                0,
                config.FILES_LATENCY_LOWER
                + random()
                * (config.FILES_LATENCY_UPPER - config.FILES_LATENCY_LOWER),
            )
        )
        if random() < config.FILES_ERROR_RATE:
            return Response(
                "INTERNAL ERROR", mimetype="text/plain", status=500
            )
        if random() < config.FILES_MISSING_RATE:
            return Response("NOT FOUND", mimetype="text/plain", status=404)
        if random() < config.FILES_BUSY_RATE:
            return Response("BUSY", mimetype="text/plain", status=503)

        if filename is None:
            return Response(
                "MISSING FILENAME", mimetype="text/plain", status=400
            )
        if filename not in config.RECORD_DATA["files"]:
            return Response(
                f"UNKNOWN FILE '{filename}'", mimetype="text/plain", status=404
            )
        r = Response(
            (
                b"\x00"
                if random() < config.FILES_BROKEN_RATE
                else config.RECORD_DATA["files"][filename]["data"]
            ),
            mimetype=config.RECORD_DATA["files"][filename]["mimetype"],
            status=200,
        )
        r.headers["Content-Disposition"] = "attachment; filename=" + filename
        return r

    return _app


app = app_factory(OAIPMHAppConfig())
